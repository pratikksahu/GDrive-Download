from __future__ import print_function
import os.path
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from googleapiclient.http import MediaIoBaseDownload
from threading import Thread
import io
from time import sleep

SCOPES = ['https://www.googleapis.com/auth/drive']


def f(fileId , title):    
    print('Started {}'.format(title))
    fh = io.BytesIO()
    request = service.files().get_media(fileId=fileId)    
    downloader = MediaIoBaseDownload(fh, request)
    done = False    
    retry = 0
    while True:
        try:
            while done is False:
                status, done = downloader.next_chunk()        
                print("Download %d%%." % int(status.progress() * 100))
            break
        except:
            retry = retry + 1
            print('Retry {}__{}'.format(title , retry))      
            fh.flush()
            sleep(60)                                                
    write_bytesio_to_file(title,fh)

def write_bytesio_to_file(filename, bytesio):
    with open(filename, "wb") as outfile:        
        outfile.write(bytesio.getbuffer())
    print('File Saved {}'.format(filename))

if __name__ == '__main__':
    creds = None
    if os.path.exists('token.json'):
        creds = Credentials.from_authorized_user_file('token.json', SCOPES)    
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'cred.json', SCOPES)
            creds = flow.run_local_server(host='localhost',port=8090)        
        with open('token.json', 'w') as token:
            token.write(creds.to_json())

    service = build('drive', 'v3', credentials=creds)
    
    folderID = '1SZ4a2j_rpHKTCSed8PSK7D5uopXUBvfF' #Replace this with your own folder

    results = service.files().list(q = "'" + folderID + "' in parents", pageSize=10, fields="nextPageToken, files(id, name)").execute()
    items = results.get('files', [])
    threads = []
                
    for n in items:      
        if(n['name'][-4:] != '.txt'):          
            fileId = n                
            t = Thread(target=f , args=[n['id'] ,n['name'],])
            t.start()
            threads.append(t)
        
    for t in threads:
        t.join()        

