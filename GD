from __future__ import print_function
import os.path
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from googleapiclient.http import MediaIoBaseDownload
from threading import Thread
import io


SCOPES = ['https://www.googleapis.com/auth/drive']

threads = []

def f(fh , fileId):
    creds = None
    if os.path.exists('token.json'):
        creds = Credentials.from_authorized_user_file('token.json', SCOPES)    
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'cred.json', SCOPES)
            creds = flow.run_local_server(host='localhost',port=8090)        
        with open('token.json', 'w') as token:
            token.write(creds.to_json())

    service = build('drive', 'v3', credentials=creds)
    request = service.files().get_media(fileId=fileId)
    downloader = MediaIoBaseDownload(fh, request)
    done = False
    try:
        while done is False:
            status, done = downloader.next_chunk()        
            print("Download %d%%." % int(status.progress() * 100))
    except:
        print('Retry {}'.format(fileId))        
        fh.flush()             
        f(fh,fileId)

    write_bytesio_to_file(fileId+'.mp4',fh)

def write_bytesio_to_file(filename, bytesio):
    with open(filename, "wb") as outfile:        
        outfile.write(bytesio.getbuffer())

if __name__ == '__main__':
    fileIds = ['1lncwt4zomjYfC0GY5t0GAIvTEDVNBqGd',
     '1eDuP0CD7nqZRRntWlHh5TnW5d-uFSxDb',
     '1y06KUUwZP8mdVCP7YpL0cgFhiIHPrOaW',
     '1NUFQN6Hx1KNlfFQF2Q7Qj1J67uppsSGl',
     '1MgY4EhoBgINyI0Fov5uDMJ7WIddPbFeJ',
     '1lKfBVhkm4Qk3_IQglVh1e6X-DMCuz-ql',
     '10z1cIfbsT1O7PNWt3PuC_pTXA1q6R97Y',
     '1Dz2X1pAddCIgo06yi_VgXzxISJ0kKKQ_',
     '1uRrWkLgUDc_fpvVtg3ozkHdC3c7utPAb']    

    for n in fileIds:        
        fh = io.BytesIO()
        fileId = n
        t = Thread(target=f , args=[fh , fileId ,])
        t.start()
        threads.append(t)
        
    for t in threads:
        t.join()

